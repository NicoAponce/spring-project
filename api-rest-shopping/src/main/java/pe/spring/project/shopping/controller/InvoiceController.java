package pe.spring.project.shopping.controller;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.server.ResponseStatusException;import pe.spring.project.shopping.entity.Invoice;import pe.spring.project.shopping.service.IInvoiceService;import pe.spring.project.shopping.utils.ErrorMessage;import javax.validation.Valid;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@RestController@RequestMapping("/invoices")public class InvoiceController {    @Autowired    private IInvoiceService iInvoiceService;    @GetMapping("/select")    public ResponseEntity<List<Invoice>> select() {        List<Invoice> invoices = iInvoiceService.select();        if (invoices.isEmpty()) {            return ResponseEntity.noContent().build();        }        return ResponseEntity.ok(invoices);    }    @GetMapping("/get/{id}")    public ResponseEntity<Invoice> get(@PathVariable Long id) {        Invoice invoice = iInvoiceService.get(id);        if (invoice == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(invoice);    }    @PostMapping("/insert")    public ResponseEntity<Invoice> insert(@Valid @RequestBody Invoice invoice, BindingResult result) {        if (result.hasErrors()) {            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, this.formatMessage(result));        }        Invoice dbInvoice = iInvoiceService.insert(invoice);        return ResponseEntity.status(HttpStatus.CREATED).body(dbInvoice);    }    @PutMapping("/update/{id}")    public ResponseEntity<Invoice> updateInvoice(@PathVariable long id, @RequestBody Invoice invoice) {        Invoice dbInvoice = iInvoiceService.update(id, invoice);        if (dbInvoice == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(dbInvoice);    }    @DeleteMapping("/delete/{id}")    public ResponseEntity<Invoice> delete(@PathVariable Long id) {        Invoice invoice = iInvoiceService.get(id);        if (invoice == null) {            return ResponseEntity.notFound().build();        }        invoice = iInvoiceService.delete(invoice);        return ResponseEntity.ok(invoice);    }    private String formatMessage(BindingResult result) {        List<Map<String, String>> errors = result.getFieldErrors().stream()                .map(fieldError -> {                    Map<String, String> error = new HashMap<>();                    error.put(fieldError.getField(), fieldError.getDefaultMessage());                    return error;                }).collect(Collectors.toList());        ErrorMessage errorMessage = ErrorMessage.builder()                .code("01")                .messages(errors)                .build();        ObjectMapper mapper = new ObjectMapper();        String jsonString = "";        try {            jsonString = mapper.writeValueAsString(errorMessage);        } catch (JsonProcessingException e) {            e.printStackTrace();        }        return jsonString;    }}