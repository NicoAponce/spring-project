package pe.spring.project.shopping.service;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import pe.spring.project.shopping.client.CustomerClient;import pe.spring.project.shopping.client.ProductClient;import pe.spring.project.shopping.entity.Customer;import pe.spring.project.shopping.entity.Detail;import pe.spring.project.shopping.entity.Invoice;import pe.spring.project.shopping.entity.Product;import pe.spring.project.shopping.repository.IDetailRepository;import pe.spring.project.shopping.repository.IInvoiceRepository;import java.util.List;import java.util.stream.Collectors;@Servicepublic class InvoiceServiceImpl implements IInvoiceService {    @Autowired    private IInvoiceRepository iInvoiceRepository;    @Autowired    private IDetailRepository detailRepository;    @Autowired    CustomerClient customerClient;    @Autowired    ProductClient productClient;    @Override    public List<Invoice> select() {        return iInvoiceRepository.findAll();    }    @Override    public Invoice insert(Invoice invoice) {        Invoice dbInvoice = iInvoiceRepository.findByNumber(invoice.getNumber());        if (dbInvoice != null) {            return dbInvoice;        }        invoice.setStatus("CREATED");        dbInvoice = iInvoiceRepository.save(invoice);        dbInvoice.getDetails().forEach(detail -> {            productClient.editStock(detail.getProductId(), detail.getQuantity() * -1);        });        return dbInvoice;    }    @Override    public Invoice update(Long id, Invoice invoice) {        Invoice dbInvoice = iInvoiceRepository.findById(id).orElse(null);        if (dbInvoice == null) {            return null;        }        dbInvoice.setNumber(invoice.getNumber());        dbInvoice.setDescription(invoice.getDescription());        dbInvoice.setCustomerId(invoice.getCustomerId());        dbInvoice.getDetails().clear();        dbInvoice.setDetails(invoice.getDetails());        dbInvoice.setStatus("UPDATED");        return iInvoiceRepository.save(dbInvoice);    }    @Override    public Invoice delete(Invoice invoice) {        Invoice dbInvoice = get(invoice.getId());        if (dbInvoice == null) {            return null;        }        dbInvoice.setStatus("DELETED");        return iInvoiceRepository.save(dbInvoice);    }    @Override    public Invoice get(Long id) {        Invoice invoice = iInvoiceRepository.findById(id).orElse(null);        if (invoice != null) {            Customer customer = customerClient.get(invoice.getCustomerId()).getBody();            invoice.setCustomer(customer);            List<Detail> details = invoice.getDetails().stream()                    .map(detail -> {                        Product product = productClient.get(detail.getProductId()).getBody();                        detail.setProduct(product);                        return detail;                    }).collect(Collectors.toList());            invoice.setDetails(details);        }        return invoice;    }}