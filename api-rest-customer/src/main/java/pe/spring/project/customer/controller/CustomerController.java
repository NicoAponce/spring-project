package pe.spring.project.customer.controller;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.server.ResponseStatusException;import pe.spring.project.customer.entity.Customer;import pe.spring.project.customer.entity.Region;import pe.spring.project.customer.service.ICustomerService;import javax.validation.Valid;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@RestController@RequestMapping("/customers")public class CustomerController {    @Autowired    ICustomerService customerService;    @GetMapping("/select")    public ResponseEntity<List<Customer>> select(            @RequestParam(name = "regionId", required = false) Long regionId) {        List<Customer> customers = new ArrayList<>();        if (regionId == null) {            customers = customerService.select();            if (customers.isEmpty()) {                return ResponseEntity.noContent().build();            }        } else {            Region region = Region.builder().id(regionId).build();            customers = customerService.getByRegions(region);            if (customers == null) {                return ResponseEntity.notFound().build();            }        }        return ResponseEntity.ok(customers);    }    @GetMapping("/get/{id}")    public ResponseEntity<Customer> get(@PathVariable Long id) {        Customer customer = customerService.get(id);        if (customer == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(customer);    }    @PostMapping("/insert")    public ResponseEntity<Customer> insert(@Valid @RequestBody Customer customer, BindingResult result) {        if (result.hasErrors()) {            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, this.formatMessage(result));        }        Customer dbCustomer = customerService.insert(customer);        return ResponseEntity.status(HttpStatus.CREATED).body(dbCustomer);    }    @PutMapping("/update/{id}")    public ResponseEntity<Customer> update(@Valid @RequestBody Customer customer, @PathVariable Long id, BindingResult result) {        if (customer == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(customerService.update(id, customer));    }    @DeleteMapping("/delete/{id}")    public ResponseEntity<Customer> delete(@PathVariable Long id) {        Customer customer = customerService.get(id);        if (customer == null) {            return ResponseEntity.notFound().build();        }        customer=customerService.delete(customer);        return ResponseEntity.ok(customer);    }    private String formatMessage(BindingResult result) {        List<Map<String, String>> errors = result.getFieldErrors().stream()                .map(fieldError -> {                    Map<String, String> error = new HashMap<>();                    error.put(fieldError.getField(), fieldError.getDefaultMessage());                    return error;                }).collect(Collectors.toList());        ErrorMessage errorMessage = ErrorMessage.builder()                .code("01")                .messages(errors)                .build();        ObjectMapper mapper = new ObjectMapper();        String jsonString = "";        try {            jsonString = mapper.writeValueAsString(errorMessage);        } catch (JsonProcessingException e) {            e.printStackTrace();        }        return jsonString;    }}