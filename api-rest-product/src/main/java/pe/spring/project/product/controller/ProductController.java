package pe.spring.project.product.controller;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.server.ResponseStatusException;import pe.spring.project.product.entity.Category;import pe.spring.project.product.entity.Product;import pe.spring.project.product.service.IProductService;import javax.validation.Valid;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@RestController@RequestMapping("/products")public class ProductController {    @Autowired    private IProductService productService;    @GetMapping("/select")    public ResponseEntity<List<Product>> select(@RequestParam(value = "categoryId", required = false) Long categoryId) {        List<Product> products = new ArrayList<>();        if (categoryId == null) {            products = productService.select();            if (products.isEmpty()) {                return ResponseEntity.noContent().build();            }        } else {            products = productService.find(Category.builder().id(categoryId).build());            if (products.isEmpty()) {                return ResponseEntity.notFound().build();            }        }        return ResponseEntity.ok(products);    }    @GetMapping("get/{id}")    public ResponseEntity<Product> get(@PathVariable Long id) {        Product product = productService.get(id);        if (product == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(product);    }    @PostMapping("/insert")    public ResponseEntity<Product> insert(@Valid @RequestBody Product product, BindingResult result) {        if (result.hasErrors()) {            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, this.formatMessage(result));        }        Product newProduct = productService.insert(product);        return ResponseEntity.status(HttpStatus.CREATED).body(newProduct);    }    @PutMapping("/update/{id}")    public ResponseEntity<Product> update(@PathVariable Long id, @RequestBody Product product) {        return ResponseEntity.ok(productService.update(id, product));    }    @DeleteMapping("/delete/{id}")    public ResponseEntity<Product> delete(@PathVariable Long id) {        Product product = productService.delete(id);        if (product == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(product);    }    @GetMapping("/edit/{id}/stock")    public ResponseEntity<Product> editStock(@PathVariable Long id, @RequestParam(name = "quantity") Integer quantity) {        Product product = productService.editStock(id, quantity);        if (product == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(product);    }    private String formatMessage(BindingResult result) {        List<Map<String, String>> errors = result.getFieldErrors().stream()                .map(fieldError -> {                    Map<String, String> error = new HashMap<>();                    error.put(fieldError.getField(), fieldError.getDefaultMessage());                    return error;                }).collect(Collectors.toList());        ErrorMessages errorMessages = ErrorMessages.builder()                .code("01")                .messages(errors)                .build();        ObjectMapper mapper = new ObjectMapper();        String jsonString = "";        try {            jsonString = mapper.writeValueAsString(errorMessages);        } catch (JsonProcessingException j) {            j.printStackTrace();        }        return jsonString;    }}